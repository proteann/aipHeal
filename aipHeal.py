#python aipHeal.py -root I:\AIP -sf C:\Python27\SF -fido C:\Python27\fido\fido -droid I:\droid-binary-6.1.5-bin\droid-command-line-6.1.5.jar 
import datetime
import os
import re
import csv
import xml.etree.ElementTree as ET
import time
import sys
from multiprocessing import Pool

#################PULLS THE FOLLOWING METADATA ELEMENTS FROM THE XML FILES AND CREATES initialMD.csv######################
#DOI
#Filepath with Name
#Existing PUID (as generated by DROID)
def oldMDParser(programStartTime):
	print "\n\nRetreiving Old Metadata"
	#print rootDir, sfDir, fidoDir
	finalCsvPath = rootDir+"\\initialMD.csv"
	f = open(finalCsvPath, "wb")
	csvWriter = csv.writer(f)
	for dirName, subdirList, fileList in os.walk(rootDir):
	#print('Found directory %s' % dirName)
		for file in fileList:
			check = re.search(r'.xml',file,)	#check if it is an XML file
			if check:
				xmlFile = dirName+"\\"+file
			
			# Search for DOI:
				checkDoi = re.search(r'(<premis:relatedObjectIdentifierValue>)([\d]+.[\d]+\W[\w]+)(</premis:relatedObjectIdentifierValue>)',open(xmlFile).read())
				if  checkDoi:
					currentDoi = checkDoi.group(2)
			
			#Search for PUID and Path
				checkDetails = re.findall(r'(<premis:formatRegistryKey>)([\d\w/-]+)(</premis:formatRegistryKey><premis:formatRegistryRole>)([\w]+)(</premis:formatRegistryRole></premis:formatRegistry></premis:format></premis:objectCharacteristics><premis:originalName>)([\d\w/ .]+)(</premis:originalName><premis:storage><premis:contentLocation><premis:contentLocationType>URI</premis:contentLocationType><premis:contentLocationValue>)([\d\w/ ://__/.]+)(</premis:contentLocationValue>)',open(xmlFile).read())
				for detail in checkDetails:
					#print currentDoi+','+detail[1]+','+detail[7]
					csvWriter.writerow( (currentDoi,detail[7],detail[1]) )							
	f.close()
	preProcessingTime = time.time()-programStartTime
	with open("runResults.csv", "w+") as myfile: ##Overwrite existing results file. 
			myfile.write("Parameter,Value")
			myfile.write("\nPre-processing time,"+str(preProcessingTime)) # First record of runResults.csv -> preprocessing time (time taken to retrieve the metadata)
	return preProcessingTime
	
def timePrint():
	print(
		datetime.datetime.fromtimestamp(
			int("1284101485")
		).strftime('%Y-%m-%d %H:%M:%S')
	)

#################RUNS THE SEGRFRIED AND FIDO APPS AND STORES THE CORRESPONDING RESULTS IN sf.csv and fido.csv respectively###################
###CAUTION: SINCE THERE IS NO INPUT SANITIZATION DONE ON THE -sf AND -fido PARAMETERS, THERE IS HUGE POSSIBILITY OF AN ATTACK. SO PLEASE REFRAIN SHARING THE SCRIPT WITH THRID PARTY
def runApp1(rootDir, sfDir, fidoDir, droidPath):
	a=1
	fidoCommand = "python "+fidoDir+"\\fido.py -recurse . > pre_fido.csv"
	os.system(fidoCommand)
def runApp2(rootDir, sfDir, fidoDir, droidPath):
	q=1
	sfCommand = sfDir+"\\sf -csv "+rootDir+" > pre_sf.csv"
	os.system(sfCommand)
def runApp3(rootDir, sfDir, fidoDir, droidPath):
	profilePath = rootDir+"\\droidProfile.droid"
	csvPath = rootDir+"\\pre_droid.csv"
	droidCommand1 = "java -jar "+droidPath+" -q -R -a "+rootDir+" -p "+profilePath
	droidCommand2 = "java -jar "+droidPath+" -q -p "+profilePath+" -e "+csvPath 
	os.system(droidCommand1)
	os.system(droidCommand2)

def postRunApps(rootDir, sfDir, fidoDir,programStartTime,preProcessingTime):
	##Record time taken for running tools:
	toolRunningTime = time.time()-programStartTime-preProcessingTime
	with open("runResults.csv", "a") as myfile: ##Overwrite existing results file. 
			myfile.write("\nTime for running tools,"+str(toolRunningTime))
	
	#######REMOVE UNWANTED FIELDS FROM THE OUTPUT OF THE PREVIOUS TOOLS 
	with open(rootDir+"\\pre_sf.csv","rb") as source:
		rdr= csv.reader( source )
		with open(rootDir+"\\sf.csv","wb") as result:
			wtr= csv.writer( result )
			for r in rdr:
				wtr.writerow( (r[0], r[5]) )
			
	# REMOVE EXTRA COLUMNS IN THE FIDO generated CSV file			
	with open(rootDir+"\\pre_fido.csv","rb") as source:
		rdr= csv.reader( source )
		with open(rootDir+"\\fido.csv","wb") as result:
			wtr= csv.writer( result )
			for r in rdr:
				wtr.writerow( (r[6], r[2]) )
	
	with open(rootDir+"\\pre_droid.csv","rb") as source:
		rdr= csv.reader( source )
		with open(rootDir+"\\droid.csv","wb") as result:
			for r in rdr:
				if(r[3]!=""):
					result.write(r[3]+","+r[14]+"\n")

	return toolRunningTime

##################THIS FUNCTION STITCHES TOGTHER THE THREE CSV FILES :initialMD.csv, fido.csv and sf.csv into the final, required output format
def csvStitcher(rootDir,numberFilesProcessed):
	print "\n\nStitiching the csv files..."
	mapOfFileNameAndFormats = {}
	fileOrder = []
	initialMDPath = rootDir+"\\initialMD.csv"
	for line in open(initialMDPath, "r").readlines():
		line = line.replace("\n","")
		linedata = line.split(",")
		# file name in index 1
		fileparts = linedata[1].split("/")
		keyName = ""
		fileName = fileparts[len(fileparts) - 1]
		fileName = "_".join(fileName.split(" "))
		for i in range(5,len(fileparts)-1):
			if keyName == "":
				keyName = fileparts[i]
			else:
				keyName += "\\" + fileparts[i]
		keyName += "\\" + fileName
		#print keyName
		fileOrder.append(keyName)
		if not keyName in mapOfFileNameAndFormats:
			mapOfFileNameAndFormats[""+keyName] = linedata[len(linedata)-1]

	factoredFileOne = rootDir+"\\sf.csv"
	for line in open(factoredFileOne, "r").readlines():
		line = line.replace("\n","")
		linedata = line.split(",")
		fileparts = linedata[0].split("\\")
		fileName = ""
		for i in range(2, len(fileparts)):
			if fileName == "":
				fileName = fileparts[i]
			else:	
				fileName += "\\" + fileparts[i]
		if fileName in mapOfFileNameAndFormats:
			currFormat = mapOfFileNameAndFormats[fileName]
			currFormat += "," + linedata[1]
			mapOfFileNameAndFormats[fileName] = currFormat
		
		
	factoredFileTwo =  rootDir+"\\fido.csv"
	##TO handle the edge case where the the tools return more than one PUIDs for a given file,
	#have dictionary having <key: filename_with_path , value: visited_or_not:true/false>
	mapOfFileandVisited_fido = {}
	for line in open(factoredFileTwo, "r").readlines(): 
		line = line.replace("\n","")
		linedata = line.split(",")	#retreive each of the fields
		fileparts = linedata[0].split("\\") #split the various parts of the file path
		fileName = ""
		for i in range(1, len(fileparts)):
			if fileName == "":
				fileName = fileparts[i]
			else:
				fileName += "\\" + fileparts[i] #put them back together 
		if linedata[1] =="":
			linedata[1] = "UNKNOWN"
		
		if fileName in mapOfFileNameAndFormats: 
			if not fileName in mapOfFileandVisited_fido: #if the node has not been visited by this tool:
				currFormat = mapOfFileNameAndFormats[fileName] # retrieve old DROID_PUID
				currFormat += "," + linedata[1]
				mapOfFileNameAndFormats[fileName] = currFormat	#append the value to the dictionary
				mapOfFileandVisited_fido[fileName] = "True"			#Mark as visited
			else:
				currFormat = mapOfFileNameAndFormats[fileName] # retrieve old DROID_PUID
				currFormat += "(+)" + linedata[1]					#append the new FIDO_PUID to the variable (without the comma since it is returned by the same tool)
				mapOfFileNameAndFormats[fileName] = currFormat

	factoredFileThree = rootDir+"\\droid.csv"
	mapOfFileandVisited_droid = {}
	for line in open(factoredFileThree, "r").readlines():
		line = line.replace("\n","")
		linedata = line.split(",")
		fileparts = linedata[0].split("\\")
		fileName = ""
		for i in range(2, len(fileparts)):
			if fileName == "":
				fileName = fileparts[i]
			else:	
				fileName += "\\" + fileparts[i]
		# In case the droid.csv had a missing value for the PUID field
		if linedata[1] =="":
			linedata[1] = "UNKNOWN"
		
		if fileName in mapOfFileNameAndFormats: 
			if not fileName in mapOfFileandVisited_droid: #if the node has not been visited by this tool:
				currFormat = mapOfFileNameAndFormats[fileName] # retrieve old DROID_PUID
				currFormat += "," + linedata[1]
				mapOfFileNameAndFormats[fileName] = currFormat	#append the value to the dictionary
				mapOfFileandVisited_droid[fileName] = "True"			#Mark as visited
			else:
				currFormat = mapOfFileNameAndFormats[fileName] # retrieve old DROID_PUID
				currFormat += "(+)" + linedata[1]					#append the new FIDO_PUID to the variable (without the comma since it is returned by the same tool)
				mapOfFileNameAndFormats[fileName] = currFormat				
	#count = 10
	#for fileName in mapOfFileNameAndFormats:
	#	print fileName, "\t", mapOfFileNameAndFormats[fileName]
	#	count -= 1
	#	if count == 0:
	#		break
	print "\n\nGenerating Output CSV..."
	outputFile = rootDir+"\\finalProper.csv"
	f = open(outputFile,"w+")
	f.write("DOI_with_Filepath,DROID_NONPROFILE_PUID,Siegfried_PUID,FIDO_PUID,DROID_PROFILE_PUID\n")
	for fileName in fileOrder:	#for every filename in fileOrder(key)
		if fileName in mapOfFileNameAndFormats:	 #lookup in the dictionary
			f.write(fileName + "," + mapOfFileNameAndFormats[fileName] + "\n") #print <key> <value> to the csv
			numberFilesProcessed = numberFilesProcessed + 1
	return (rootDir,numberFilesProcessed)	
		
		
##############END OF FUNCTIONS#########################################################		
	

numberFilesProcessed = 0
programStartTime = time.time()
check = re.search('-root',str(sys.argv))	#check if it is an XML file
rootDirCheck = re.search('-root',str(sys.argv))
sfDirCheck = re.search('-sf',str(sys.argv))
fidoDirCheck = re.search('-fido',str(sys.argv))
droidDirCheck = re.search('-droid',str(sys.argv))
if (rootDirCheck and sfDirCheck and fidoDirCheck and droidDirCheck and len(sys.argv)==9):
	if __name__ == '__main__':  
		rootDir = str(sys.argv[2])
		sfDir = str(sys.argv[4])
		fidoDir = str(sys.argv[6])
		droidPath = str(sys.argv[8])
		preProcessingTime = oldMDParser(programStartTime)
		print "\n"
		runApp1(rootDir, sfDir, fidoDir, droidPath)
		runApp2(rootDir, sfDir, fidoDir, droidPath)
		runApp3(rootDir, sfDir, fidoDir, droidPath)
		#pool = Pool()
		#argsList = [rootDir, sfDir, fidoDir, droidPath]
		#result1 = pool.apply_async(runApp1, argsList)    # evaluate "solve1(A)" asynchronously
		#result2 = pool.apply_async(runApp2, argsList)    # evaluate "solve2(B)" asynchronously
		#result3 = pool.apply_async(runApp3, argsList)
		#answer1 = result1.get()
		#answer2 = result2.get()
		#answer3 = result3.get()
		toolRunningTime = postRunApps(rootDir, sfDir, fidoDir,programStartTime,preProcessingTime)
		rootDir, numberFilesProcessed = csvStitcher(rootDir,numberFilesProcessed)
		programRunTime = time.time() - programStartTime
		postProcessingTime = programRunTime - toolRunningTime - preProcessingTime 
		with open("runResults.csv", "a") as myfile:
			myfile.write("\nPost Processing Time,"+str(postProcessingTime))
			myfile.write("\nTotal Program Run Time,"+str(programRunTime))
			myfile.write("\nTotal Files processed,"+str(numberFilesProcessed))
			myfile.write("\nFiles processed per second,"+str(numberFilesProcessed/programRunTime))
		
else:
	print "ERROR: Insufficient Parameters\nThe following parameters are mandatory(in the order specified):\n-root:DIRECTORY_CONTAINING_AIP_PACKETS\n-sf:LOCATION_OF_SEGFRIED_INSTALLATION\n-fido:DIRECTORY_OF_FIDO_INSTALLATION\n"
	
